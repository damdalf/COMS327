------------------------------------------------------------------------------

03/07/2022:
------------------------------------------------------------------------------
I have created my README which outlines the requirements for this 
assignment, and am now trying to plan out the order in which I will
add the required functionalities. As of now, since my Dijkstra's
algorithm only calculates the cost map for the Rival and Hikers,
I plan to implement the functionality to create the cost map for the
PC itself, and then add the functionality to actually store the
shortest path for each 'type' of character. From there, I will then
begin generating the NPC's into the map and implementing the
--numTrainers switch.

I have now realized that I will need to create separate structs to
represent the types of characters in the game, and that each character
will need to have their own corresponding cost maps and previous node
arrays. Since the number of trainers that we can have in a map is 
dynamic, I will need to create an array using double pointer notation
for each kind of NPC, which is dynamically allocated at runtime.
------------------------------------------------------------------------------
STATUS:
- Dijkstra's aglorithm is implemented for the PC's cost map.
- Completely restructured my program, in the following ways:
	* Restructured the 'map' struct to now contain a PC and a 
	dynamic array containing Trainers.
		- The 'player_t' struct was changed to 'character_t', and
		now encompasses all types of characters that we will be
		in the game. Struct members include:
			* int xPos
			* int yPos
			* char symbol
			* char previousTerrain
		- These trainers are then GUARANTEED to contain at least
		one Hiker and one Rival.
		- From there, the remaining ten (have not added switch
		functionality yet) are randomly decided upon.
	* Refactored 'initializeCostMaps()' to include these changes, 
	refactored 'initializeHikerCostMap()' and 'initializeRivalCostMap()'
	into a single function 'initializeTrainerCostMaps()', refactored
	'printHikerCostMap()' and 'printRivalCostMap()' to a single function
	'printTrainerCostMaps', refactored 'dijkstraHiker()' and 
	'dijkstraRival()' into a single function 'dijkstraTrainer()',
	and added the function 'initializeTrainers()' which handles
	randomly deciding the types of the trainers.
------------------------------------------------------------------------------
03/08/2022:
------------------------------------------------------------------------------
NOTE: Just realizing that I did not see the 'random walker' type of Trainers,
will have to adjust changes made in the previous log to include this type
of Trainer, good catch.

With the above changes in place, it is now time to create a function to
randomly place the NPC's into the map, in regards to all of the listed
constraints. From there, it would be best to create a function,
'findShortestPath()', that keeps track of the list of nodes that the 
character has traveled to based on the current 'lowest' cost terrain cell.

Once that is implemented, it would be a good idea to implement the
 '--numTrainers' switch, as that is the last functionality that prevents the
implementation of the dynamic aspects of this assignment, those being the
NPC's tracking the PC based on his movements, as well as the ability to move
the PC in the first place, all in regards to the given constraints.

I have been struggling to properly implement 'findShortestPath()' for the past
couple of hours. However, I had been trying to use an array to store these
values. Thus, I am now going to try and use a priority queue.

I am now under the belief that I was over-complicating the problem, as
generating an actual list of the shortest path for an NPC is pointless, since
the PC's position will be changing. Thus, it is only neccessary for an NPC
(namely the Hikers and Rivals) to move to their next lowest cost terrain cell
based upon the PC's new position every game turn.

Now implementing these changes.
------------------------------------------------------------------------------
STATUS:
- For modularity sake, implementing a function 'generateNPC()' that 
generates a single NPC, in accomondation to the corresponding constraints.
This function is then used in 'generateNPCs()', which loops through the 
entire array of Trainers and runs 'generateNPC()' each time.
- Changed Trainer loops from using a hardcoded integer value of 10, to
using the macro 'NUM_TRAINERS' in order to make the switch to using a minimum 
and dynamic number of trainers easier. One line changed versus several.
- Added the new character types to 'printColor()' to add more liveliness to
the game, and separate NPC's from the environment.
- Added the following functions to be within 'randomGeneration()':
	* 'initializeTrainers()'
	* 'initializeCostMaps()'
	* 'initializePlayerCostMap()'
	* 'initializeTrainerCostMaps()'
	* 'dijkstraTrainer()'
	* 'dijkstraPC()'
	* 'printPlayerCostMap()'
	* 'printTrainerCostMaps()'
	* 'generateCharacters()'
- Added the sixth type of Trainer, the 'random walkers'.
- Added macros for all of the NPC's text-symbols.
- Added function 'findShortestPathHikersAndRivals()' as those are the only
types of NPCs in which they path to the PC, and must account for traveling
easy terrain. This method finds the next move for each Hiker and Rival in 
the map based off of the most recent cost maps, which will be generated
each game turn. As of now, for testing, these values are printed to the
console. Each character struct now has a coordinate_t member called
'nextMove'.
------------------------------------------------------------------------------
03/09/2022:
------------------------------------------------------------------------------
Now that I have resolved the issues with generating the shortest path for the
Hikers and Rivals, or the lack thereof, and implemented the ability to
specify the number of trainers to be generated for the game based off of a
command line argument, it is now time to focus on the other remaining tasks:
- Implement a direction member for all character_t structs.
- Implement static movement for Wanderers, Pacers, and Random Walkers.
- Implement static  movement for the PC.
- Implement the 'game turn' functionality.
- Debug, and then proceed to 'zip and ship'.

A lot has happened since my last update, far too much to place here. Spent
several hours unable to get findNextMovePacers() to work, but I finally
have gotten it implemented. Stopped trying to use a cost map for checks,
and am now solely using a new member of the map_t struct called 
characterArray[HEIHGT][WIDTH] which only contains the characters. This has
simplifed the process of printing the characters and later allowing the
characters to move freely without distorting the mapArray.
------------------------------------------------------------------------------
STATUS:
- Implemented the ability to specify the number of trainers to be generated
for the current game based off of a command line argument.
- Implemented a findNextMoves() function which handles finding the next move
for all types of Trainers. 
- Implemented findNextMovePacers(), a char characterArray[HEIGHT][WIDTH]
member to the map_t struct.
- Removed the creation and printing of non PC, Hikers, and Rivals cost maps.
- Changed --numTrainers switch to recognize the previous String and then
obtain the int value of the number of Trainers that will be located in the
next argument of *argv[].
- Added the functionality that 'generateDirections()' never generates a 
direction that the Trainer already was facing, as that would make no sense.
- Implemented 'findNextMoveWanderers()'.
- Implemented 'findNextMoveRandomWalkers()'.
- Implemented 'updateTrainerLocations()'.
------------------------------------------------------------------------------
03/10/2022:
------------------------------------------------------------------------------
Well, I went to test movement without using a PQ and just using my
'updateTrainerLocations()' and 'usleep()', and oh lord, things are behaving
VERY badly. Characters that shouldn't be printed over the terrain map are 
being printed, Hikers and Rivals are not mapping to the PC, and NPC's are
leaving the bounds of the map.
- One idea to solve the bounds issue is to simply make the 'characterArray'
one row and column smaller than the terrainArray, avoiding the possibility
to go on the borders entirely.
- Implemented static movement functions and game turns. While this does not
use a queue yet, I wanted to guarrantee that I got this assignment submitted
as is. Thus, some very small bugs exist. Hopefully I can work out the kinks
and convert my solution to using a priority queue for handling the NPC's
movements via their corresponding costs in comparison to all of the map's
NPCs. It turns out I was overcomplicating many of the functions by having
them do a certain functionality for ALL NPCs, as opposed to doing it one by
one.
------------------------------------------------------------------------------
STATUS:
- Without using a priority queue, implemented 'game turns', and NPC movement.
- Some bugs still persist.
- There are comments and old code that need to be deleted. But, I just wanted
to make sure that I got my submission submitted prior to the assignment's
submission being closed.
- Implemented and changed FAR too many functions to list currently, given
the time constraints. However, a lot was changed.
------------------------------------------------------------------------------
// TODO:
------------------------------------------------------------------------------
- Delete all 'old' and unused code.
- Implement dynamic movement of NPCs using a priority queue.
- Refactor code, and delete comments.
------------------------------------------------------------------------------
